// Generated by CoffeeScript 1.6.3
(function() {
  var Puid, UserLinda, UserMongo, app, cookie, express, http, io, path, request, routes, server, url, user;

  UserMongo = require("./user_modules/mongo.js");

  UserLinda = require("./user_modules/linda.js");

  Puid = require("puid");

  express = require('express');

  routes = require('./routes');

  user = require('./routes/user');

  http = require('http');

  path = require('path');

  request = require("request");

  url = require("url");

  app = express();

  cookie = require("cookie");

  app.set('port', process.env.PORT || 4555);

  app.set('views', __dirname + '/views');

  app.set('view engine', 'jade');

  app.use(express.favicon());

  app.use(express.logger('dev'));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(express.cookieParser());

  app.use(express.session({
    secret: "hogehuga",
    cookie: {
      httpOnly: false
    }
  }));

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, 'public')));

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  server = http.createServer(app).listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

  app.get("/control", function(req, res) {
    return res.render("index", {
      title: "LindaMax"
    });
  });

  app.get("/", function(req, res) {
    return res.render("explain", {
      title: "LindaMax"
    });
  });

  app.post("/", function(req, res) {
    var data;
    data = {};
    data.name = req.body.name;
    res.set('Content-Type', 'application/json');
    return res.json(data);
  });

  app.get("/:obj", function(req, res) {
    var Mono;
    Mono = UserMongo.monoModel;
    return Mono.findOne({
      name: req.params.obj
    }).populate("sensors").exec(function(err, mono) {
      if (mono != null) {
        /*
        console.log mono.sensors
        res.send(mono.sensors)
        */

        return res.render("detail");
      } else {
        return res.render("err");
      }
    });
  });

  app.get("/:obj/output", function(req, res) {
    console.log(req.params.obj);
    return UserMongo.clientModel.findOne({
      path: req.params.obj
    }, function(err, client) {
      if (!err && (client != null) && (client.url != null)) {
        return res.render("output", {
          url: client.url,
          form: client.form
        });
      } else {
        return res.render("output");
      }
    });
  });

  io = require('socket.io').listen(server);

  io.sockets.on("connection", function(socket) {
    var uid;
    socket.on("path", function(path) {
      return UserMongo.clientModel.findOne({
        path: path
      }, function(err, client) {
        if (!err && (client != null)) {
          socket.emit("blocks", client.blocks);
          if (client.connections != null) {
            return socket.emit("restoreConnections", client.connections);
          }
        }
      });
    });
    UserMongo.sensorModel.find({}, function(err, sensor) {
      return socket.emit("sensors", sensor);
    });
    socket.on("CreateMono", function(data) {
      return UserMongo.createMono(data);
    });
    socket.on("CreateSensor", function(data) {
      var linda;
      linda = UserLinda.linda("delta");
      return linda.io.on("connect", function() {
        return linda.ts.read(["sensor", "light"], function(tuple, info) {
          console.log(tuple, info);
          console.log(tuple[tuple.length - 1]);
          linda.io.emit("disconnect");
          return UserMongo.createSensor(data, tuple[2]);
        });
      });
    });
    socket.on("AddSensor", function(data) {
      return UserMongo.addSensor(data[0], data[1]);
    });
    socket.on("sensorRequest", function(data) {
      var contents, linda;
      contents = data.split("/");
      linda = UserLinda.linda(contents[0]);
      contents.shift();
      return linda.io.on("connect", function() {
        return linda.ts.watch(contents, function(tuple, info) {
          console.log(tuple, info);
          console.log(tuple[tuple.length - 1]);
          linda.io.emit("disconnect");
          return socket.emit("lindaData", [data, tuple[tuple.length - 1]]);
        });
      });
    });
    socket.on("saveConnections", function(data) {
      var connections;
      path = data[0];
      if (data[1] != null) {
        connections = data[1];
      } else {
        connections = [];
      }
      return UserMongo.saveConnections(path, connections);
    });
    socket.on("saveOutput", function(data) {
      var form;
      path = data[0];
      url = data[1][0];
      form = data[1][1];
      return UserMongo.saveOutput(path, url, form);
    });
    socket.on("urlRequest", function(path) {
      url = null;
      return UserMongo.clientModel.findOne({
        path: path
      }, function(err, client) {
        var options;
        if (!err && (client != null)) {
          options = {
            uri: client.url,
            form: JSON.parse(client.form),
            json: true
          };
          console.log("uri", client.url);
          console.log("form", JSON.parse(client.form));
          return request.get(options, function(error, response, body) {
            if (!error && response.statusCode === 200) {
              return console.log(body);
            } else {
              return console.log("error:", response.statusCode);
            }
          });
        }
      });
    });
    socket.on("saveClient", function(data) {
      var blocks;
      path = data[0];
      if (data[1] != null) {
        blocks = data[1];
      } else {
        blocks = [];
      }
      console.log("blocks", blocks);
      return UserMongo.saveClient(path, blocks);
    });
    uid = null;
    socket.on("uidRequest", function() {
      var puid;
      puid = new Puid();
      uid = puid.generate();
      return socket.emit("uidResponse", uid);
    });
    return socket.on("disconnect", function() {
      return console.log("control disconnect");
    });
  });

}).call(this);
