// Generated by CoffeeScript 1.6.2
(function() {
  var Client, ClientSchema, Mono, MonoSchema, ObjectId, Schema, Sensor, SensorSchema, addSensor, createMono, createSensor, db, mongoose, saveClient, saveConnections, saveOutput;

  mongoose = require("mongoose");

  db = mongoose.connect("mongodb://localhost/mono");

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  MonoSchema = new Schema({
    name: {
      type: String,
      unique: true
    },
    content: {
      type: String,
      "default": "this is test"
    },
    sensors: [
      {
        type: ObjectId,
        ref: "sensors"
      }
    ],
    created: {
      type: Date,
      "default": new Date()
    }
  });

  SensorSchema = new Schema({
    name: {
      type: String,
      unique: true
    },
    data: {},
    created: {
      type: Date,
      "default": new Date()
    }
  });

  ClientSchema = new Schema({
    path: {
      type: String,
      unique: true
    },
    url: {
      type: String,
      unique: true
    },
    blocks: [],
    connections: []
  });

  Mono = db.model("monos", MonoSchema);

  Sensor = db.model("sensors", SensorSchema);

  Client = db.model("clients", ClientSchema);

  createMono = function(name, content) {
    if (name === "") {
      console.log("object not exist");
      return;
    }
    return Mono.findOne({
      name: name
    }, function(err, mono) {
      var buf;

      if (!err) {
        buf = new Mono({
          name: name,
          content: content ? content : void 0
        });
        buf.save();
        return console.log("create mono");
      }
    });
  };

  createSensor = function(name, data) {
    if (name === "") {
      console.log("sensor not exist");
      return;
    }
    return Sensor.findOne({
      name: name
    }, function(err, sensor) {
      var buf;

      if (!err) {
        buf = new Sensor({
          name: name,
          data: data
        });
        buf.save();
        return console.log("create sensor");
      }
    });
  };

  addSensor = function(monoN, sensorN) {
    return Mono.findOne({
      name: monoN
    }, function(err, mono) {
      var isid;

      if (mono == null) {
        console.log("object not exist");
        return;
      }
      if (!err && (mono != null)) {
        isid = true;
        return Sensor.findOne({
          name: sensorN
        }, function(err, sensor) {
          var i, _i, _len, _ref;

          if (sensor == null) {
            console.log("sensor not exist");
            return;
          }
          if (!err && (sensor != null)) {
            _ref = mono.sensors;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              if (("" + i) === ("" + sensor._id)) {
                isid = false;
              }
            }
            if (isid) {
              mono.sensors.push(sensor);
              mono.save();
              return console.log("add sensor");
            } else {
              return console.log("this name exist");
            }
          }
        });
      }
    });
  };

  saveClient = function(path, blocks) {
    return Client.findOne({
      path: path
    }, function(err, client) {
      var buf;

      if (!err && (client == null)) {
        buf = new Client({
          path: path,
          blocks: blocks
        });
        buf.save();
        console.log("client saved");
      }
      if (!err && (client != null)) {
        client.path = path;
        client.blocks = blocks;
        client.save();
        return console.log("client renewal");
      }
    });
  };

  saveConnections = function(path, connections) {
    return Client.findOne({
      path: path
    }, function(err, client) {
      if (!err && (client == null)) {
        console.log("client not found");
      }
      if (!err && (client != null)) {
        client.connections = connections;
        client.save();
        return console.log("connections renewal");
      }
    });
  };

  saveOutput = function(path, url) {
    return Client.findOne({
      path: path
    }, function(err, client) {
      if (!err && (client == null)) {
        console.log("client not found");
      }
      if (!err && (client != null)) {
        client.url = url;
        client.save();
        return console.log("output data renewal");
      }
    });
  };

  /*
  Mono.findOne (name: "aaa")
  .populate("sensors")
  .exec((err, mono)->
    if !mono?
      console.log "object not exist"
      return
    if !err and mono?
      #console.log "get sensor:", mono.sensors
      console.log mono
      mono
  )
  */


  module.exports = {
    createMono: createMono,
    createSensor: createSensor,
    addSensor: addSensor,
    saveClient: saveClient,
    saveConnections: saveConnections,
    saveOutput: saveOutput,
    monoModel: Mono,
    sensorModel: Sensor,
    clientModel: Client
  };

}).call(this);
